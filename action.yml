name: Gitleaks Scanner
description: Run Gitleaks in your CI/CD pipeline
branding:
  color: purple
  icon: shield
inputs:
  path:
    description: "Path to scan (relative to $GITHUB_WORKSPACE)"
    required: false
  config_path:
    description: "Path to config (relative to $GITHUB_WORKSPACE)"
    required: false
    default: "/.gitleaks/gitleaks.toml"
  additional_config:
    description: "Path to an additional Gitleaks config to append with an existing config (relative to $GITHUB_WORKSPACE)"
    required: false
    default: "/.gitleaks/UDMSecretChecks.toml"
  format:
    description: "Report file format: json, csv, sarif (default: json)"
    required: true
    default: "json"
  branch:
    description: "Branch to scan"
    required: false
  no_git:
    description: "Treat git repos as plain directories and scan those file"
    required: false
  redact:
    description: "Redact secrets from log messages and leaks"
    required: false
  depth:
    description: "Number of commits to scan"
    required: false
  fail:
    description: "Fail if secrets founded"
    required: false
    default: "true"
  verbose:
    description: "Show verbose output from scan"
    required: false
  debug:
    description: "Log debug messages"
    required: false

outputs:
  exitcode: # id of output
    description: "Success for failure value from scan"
  result: # id of output
    description: "Gitleaks result summary"
  output: # id of output
    description: "Gitleaks log output"
  command: # id of output
    description: "Gitleaks executed command"
  report: # id of output
    description: "Report file path"

runs:
  using: "docker"
  # image: "Dockerfile"
  image: "docker://ghcr.io/dariuszporowski/github-action-gitleaks:latest"
  # args:
  #   - -p ${{ inputs.path }}
  #   - -c ${{ inputs.config-path }}
  #   - -a ${{ inputs.additional-config }}
  #   - -f ${{ inputs.format }}
  #   - -b ${{ inputs.branch }}
  #   - -n ${{ inputs.no-git }}
  #   - -r ${{ inputs.redact }}
  #   - -i ${{ inputs.depth }}
  #   - -x ${{ inputs.fail }}
  #   - -v ${{ inputs.verbose }}
  #   - -d ${{ inputs.debug }}
